- highlight_in_menu "linkeddocumentation"
- set_page_title "Linked Development Documentation"
- bodyclass 'docs'

-# -------------------------------------------------------------------
-#  FULL WIDTH INTRODUCTION
-# -------------------------------------------------------------------

- content_for :docs_intro do
  %h1 Linked Development Documentation
  :markdown
    The Linked Development API is a [clone of the IDS API](http://api.ids.ac.uk/docs/).

    This API is designed to be accessible to applications written for the IDS API.  With minimal modifications they will be able to access the large collection of documents and meta data resources which we store.

-# -------------------------------------------------------------------
-#  MAIN CONTENT
-#
-#  Note that if you change a section title, you should check you
-#  have also updated any inline links to it
-#
-# -------------------------------------------------------------------

= documentation_section "Linked Development API" do
  = documentation_subsection "Accessing the API" do
    %p The API has been designed to allow applications written for the IDS API to be simply modified to talk to a large collection of documents and resources drawn from across the datasets including in Linked Development.  The API supports both JSON and XML response types across all of our endpoints.
  = documentation_subsection "API URL Patterns" do
    %p We follow the IDS API's URL pattern for modelling our request methods, typically this means that API methods follow the following structure:
    = codeblock "uri" do
      \/openapi/{graph}/{function}/{object}/{identifier_or_type}/[detail][format]?{option_parameters}
    %table
      %thead
        %tr
          %th Parameter
          %th Acceptable Values
          %th Description
      %tbody
        %tr
          %td.details graph
          %td all, eldis, r4d
          %td.hardwrap The graph parameter indicates the scope of your query.  There are two main graphs, <strong>r4d</strong> and <strong>eldis</strong> and a union <strong>all</strong> graph for queries that wish to search across both platforms.  The graphs are equivalent to the two primary datasets we hold in our Linked Data store.
        %tr
          %td.details function
          %td get, get_all, search, count
          %td.hardwrap The function represents the type of query you are performing.  For example a <strong>get</strong> will typically return one result by its id, whilst a <strong>get_all</strong> or a <strong>search</strong> will tend to return many results in a paginated form.  Calls to <strong>count</strong> will return the number of distinct objects that are found to match your query.
        %tr
          %td.details object
          %td themes, documents, regions, countries, research_outputs
          %td.hardwrap The function represents the type of query you are performing.  For example a <strong>get</strong> will typically return one result by its id, whilst a <strong>get_all</strong> or a <strong>search</strong> will tend to return many results in a paginated form.
        %tr
          %td.details identifier_or_type
          %td N/A
          %td.hardwrap Typically this parameter is used to refer to a specific object by an identifier for example during a  <strong>get</strong> request.  Sometimes its use is overloaded depending on the function, for example <strong>count</strong> queries use it to specify the object types you are counting.
        %tr
          %td.details detail
          %td short, full 
          %td.hardwrap This is an optional parameter that is supported on all routes.  It allows the requestor to specify how much detail comes back with each request.  If this parameter is not supplied it will default to <strong>short</strong>.  Choosing a <strong>full</strong> level of detail will return a more complicated document back consisting of much more information than in the <strong>short</strong> view.
        %tr
          %td.details format
          %td .json, .xml
          %td.hardwrap Requests against the API <strong>must</strong> specify a format.  This can be done either by providing the appropriate mime-type as an <strong>Accept</strong> header on the HTTP request, or by appending either .json or .xml to the requests URL string.
        %tr
          %td.details option_parameters
          %td num_results, start_offset ...
          %td.hardwrap Query string parameters can be provided with some requests to further refine them, however all requests returning many results support pagination via the parameters num_results and start_offset.  For details on specific parameters please refer to the documentation for each object/function.


              
-# -------------------------------------------------------------------
-#  CONTENTS NAVIGATION copy and paste from PMD. TODO: partialise
-# -------------------------------------------------------------------

- content_for :docs_contents do
  %nav.contents
    %h2 Contents
    - @documentation_sections.each do |section|
      %h3= section[:name]
      %ul
      - section[:subsections].each do |subsection|
        %li= docs_inline_link subsection[:name], subsection[:name]
        / 
          - # don't include subsubsections in nav
          - if (subsection[:subsubsections].length > 0)
            %ul
            - subsection[:subsubsections].each do |subsubsection|
              %li= docs_inline_link subsubsection[:name], subsubsection[:name]